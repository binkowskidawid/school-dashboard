generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAuth {
  id       String    @id @default(cuid())
  username String    @unique
  password String
  role     UserRole
  sessions Session[]

  adminProfile   Admin?
  teacherProfile Teacher?
  parentProfile  Parent?
  studentProfile Student?
}

model Session {
  id           String   @id @default(cuid())
  refreshToken String   @unique
  userAuthId   String
  userAuth     UserAuth @relation(fields: [userAuthId], references: [id])
  deviceInfo   String?
  lastUsed     DateTime @default(now())
  expiresAt    DateTime
  isValid      Boolean  @default(true)
}

model Admin {
  id         String    @id
  name       String
  role       UserRole  @default(ADMIN)
  userAuthId String?   @unique
  userAuth   UserAuth? @relation(fields: [userAuthId], references: [id])
}

model Student {
  id          String       @id
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  role        UserRole     @default(STUDENT)
  userAuthId  String?      @unique
  userAuth    UserAuth?    @relation(fields: [userAuthId], references: [id])

  @@index([classId, gradeId])
  @@index([parentId])
}

model Teacher {
  id         String    @id
  name       String
  surname    String
  email      String?   @unique
  phone      String?   @unique
  address    String
  img        String?
  bloodType  String
  sex        UserSex
  createdAt  DateTime  @default(now())
  subjects   Subject[]
  lessons    Lesson[]
  classes    Class[]
  birthday   DateTime
  role       UserRole  @default(TEACHER)
  userAuthId String?   @unique
  userAuth   UserAuth? @relation(fields: [userAuthId], references: [id])

  @@index([surname, name])
}

model Parent {
  id         String    @id
  name       String
  surname    String
  email      String?   @unique
  phone      String    @unique
  address    String
  createdAt  DateTime  @default(now())
  students   Student[]
  role       UserRole  @default(PARENT)
  userAuthId String?   @unique
  userAuth   UserAuth? @relation(fields: [userAuthId], references: [id])
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]

  @@index([supervisorId])
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]

  @@index([name])
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]

  @@index([day, startTime])
  @@index([teacherId, day])
  @@index([classId, day])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])

  @@index([studentId, examId])
  @@index([studentId, assignmentId])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])

  @@index([date])
  @@index([studentId, date])
  @@index([lessonId, date])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])

  @@index([startTime])
  @@index([classId, startTime])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])

  @@index([date])
  @@index([classId, date])
}

enum UserRole {
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
